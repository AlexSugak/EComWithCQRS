/*
Deployment script for ECom.EventStore

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "ECom.EventStore"
:setvar DefaultFilePrefix "ECom.EventStore"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL10_50.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL10_50.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
/*
 Pre-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be executed before the build script.	
 Use SQLCMD syntax to include a file in the pre-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the pre-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Dropping FK_Events_Aggregates...';


GO
ALTER TABLE [dbo].[Events] DROP CONSTRAINT [FK_Events_Aggregates];


GO
PRINT N'Starting rebuilding table [dbo].[Aggregates]...';


GO
BEGIN TRANSACTION;

SET TRANSACTION ISOLATION LEVEL SERIALIZABLE;

SET XACT_ABORT ON;

CREATE TABLE [dbo].[tmp_ms_xx_Aggregates] (
    [AggregateId] NVARCHAR (50)  NOT NULL,
    [Type]        NVARCHAR (100) NOT NULL,
    [Version]     INT            NOT NULL,
    CONSTRAINT [tmp_ms_xx_constraint_PK_Aggregates] PRIMARY KEY CLUSTERED ([AggregateId] ASC)
);

IF EXISTS (SELECT TOP 1 1 
           FROM   [dbo].[Aggregates])
    BEGIN
        
        INSERT INTO [dbo].[tmp_ms_xx_Aggregates] ([AggregateId], [Type], [Version])
        SELECT   [AggregateId],
                 [Type],
                 [Version]
        FROM     [dbo].[Aggregates]
        ORDER BY [AggregateId] ASC;
        
    END

DROP TABLE [dbo].[Aggregates];

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_Aggregates]', N'Aggregates';

EXECUTE sp_rename N'[dbo].[tmp_ms_xx_constraint_PK_Aggregates]', N'PK_Aggregates', N'OBJECT';

COMMIT TRANSACTION;

SET TRANSACTION ISOLATION LEVEL READ COMMITTED;


GO
PRINT N'Altering [dbo].[Events]...';


GO
ALTER TABLE [dbo].[Events] ALTER COLUMN [AggregateId] NVARCHAR (50) NOT NULL;


GO
PRINT N'Creating FK_Events_Aggregates...';


GO
ALTER TABLE [dbo].[Events] WITH NOCHECK
    ADD CONSTRAINT [FK_Events_Aggregates] FOREIGN KEY ([AggregateId]) REFERENCES [dbo].[Aggregates] ([AggregateId]);


GO
/*
Post-Deployment Script Template							
--------------------------------------------------------------------------------------
 This file contains SQL statements that will be appended to the build script.		
 Use SQLCMD syntax to include a file in the post-deployment script.			
 Example:      :r .\myfile.sql								
 Use SQLCMD syntax to reference a variable in the post-deployment script.		
 Example:      :setvar TableName MyTable							
               SELECT * FROM [$(TableName)]					
--------------------------------------------------------------------------------------
*/
GO

GO
PRINT N'Checking existing data against newly created constraints';


GO
USE [$(DatabaseName)];


GO
ALTER TABLE [dbo].[Events] WITH CHECK CHECK CONSTRAINT [FK_Events_Aggregates];


GO
PRINT N'Update complete.'
GO
