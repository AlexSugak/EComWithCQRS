@using ECom.Messages

@functions
{ 
    bool ShouldShow(ModelMetadata metadata) { 
        return metadata.ShowForEdit 
            && !ViewData.TemplateInfo.Visited(metadata); 
    }
    
    bool HasErrors(string propertyName) {
        return ViewData.ModelState[propertyName] != null
            && ViewData.ModelState[propertyName].Errors != null
            && ViewData.ModelState[propertyName].Errors.Count > 0;
    }
}

@helper PropertyEditor(ModelMetadata meta)
{
	if (typeof(IIdentity).IsAssignableFrom(meta.ModelType)) { 
		if(meta.Model == null || String.IsNullOrEmpty(((IIdentity)meta.Model).GetId())) {
			<label for="@meta.PropertyName" class="control-label">@(String.IsNullOrEmpty(meta.DisplayName) ? meta.PropertyName : meta.DisplayName)</label>
			<div class="controls">
				@Html.TextBox(meta.PropertyName, String.Empty) 
				<br />
				@Html.ValidationMessage(meta.PropertyName, new { @class = "help-inline" }) 
			</div>
		} else {
			@Html.Hidden(meta.PropertyName, ((IIdentity)meta.Model).GetId())
		}
	} else {
		<label for="@meta.PropertyName" class="control-label">@(String.IsNullOrEmpty(meta.DisplayName) ? meta.PropertyName : meta.DisplayName)</label>
		<div class="controls">
			@Html.Editor(meta.PropertyName)
			@Html.ValidationMessage(meta.PropertyName, new { @class = "help-inline" }) 
		</div>
	}
}

@if (ViewData.TemplateInfo.TemplateDepth > 1) {
    if (Model == null) {
        @ViewData.ModelMetadata.NullDisplayText
    } else { 
        @ViewData.ModelMetadata.SimpleDisplayText
    }
} else {
    foreach (var prop in ViewData.ModelMetadata.Properties.Where(pm => ShouldShow(pm))) {
        <div class="control-group @(HasErrors(prop.PropertyName) ? "error" : String.Empty)">
        @if (prop.HideSurroundingHtml) {
            @Html.Editor(prop.PropertyName)
        } else {
			@PropertyEditor(prop)
        }
        </div>
    }
}
