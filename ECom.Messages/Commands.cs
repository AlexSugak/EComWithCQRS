//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the "CommandsGenerator.fsx" script.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Runtime.Serialization;

namespace ECom.Messages
{

[GeneratedCodeAttribute("CommandsGenerator.fsx", "1.0.0.0")]
[DataContract(Namespace = "http://teamboard.com/contracts/commands/")]
public sealed class ReportUserLoggedIn: ICommand<UserId>, IEquatable<ReportUserLoggedIn>
{
    public UserId Id
    {
        get { return this.userId; }
    }

    [DataMember(Name = "UserId")]
    private UserId userId;

    public UserId UserId
    {
        get { return this.userId; }
    }

    [DataMember(Name = "UserName")]
    private String userName;

    public String UserName
    {
        get { return this.userName; }
    }

    [DataMember(Name = "PhotoUrl")]
    private String photoUrl;

    public String PhotoUrl
    {
        get { return this.photoUrl; }
    }

    public ReportUserLoggedIn(UserId userId, String userName, String photoUrl)
    {
        this.userId = userId;
        this.userName = userName;
        this.photoUrl = photoUrl;
    }
    
    public bool Equals(ReportUserLoggedIn other)
    {
        if (this != null)
		{
			return other != null && UserId.Equals(this.UserId, other.UserId) && String.Equals(this.UserName, other.UserName) && String.Equals(this.PhotoUrl, other.PhotoUrl);
		}
		return other == null;
    }

    public override bool Equals(object obj)
    {
        var other = obj as ReportUserLoggedIn;
        return other != null && this.Equals(other);
    }

    public override int GetHashCode()
    {
        var hash = 17;
        
        if (this.UserId != null)
            hash = hash * 29 + this.UserId.GetHashCode();
        if (this.UserName != null)
            hash = hash * 29 + this.UserName.GetHashCode();
        if (this.PhotoUrl != null)
            hash = hash * 29 + this.PhotoUrl.GetHashCode();
        
        return hash;
    }

    public static bool operator ==(ReportUserLoggedIn a, ReportUserLoggedIn b)
    {
	    if (System.Object.ReferenceEquals(a, b))
		{
			return true;
		}
		if (((object)a == null) || ((object)b == null))
		{
			return false;
		}
		return a.Equals(b);
	}

	public static bool operator !=(ReportUserLoggedIn a, ReportUserLoggedIn b)
	{
		return !(a == b);
	}
}

[GeneratedCodeAttribute("CommandsGenerator.fsx", "1.0.0.0")]
[DataContract(Namespace = "http://teamboard.com/contracts/commands/")]
public sealed class SetUserEmail: ICommand<UserId>, IEquatable<SetUserEmail>
{
    public UserId Id
    {
        get { return this.userId; }
    }

    [DataMember(Name = "UserId")]
    private UserId userId;

    public UserId UserId
    {
        get { return this.userId; }
    }

    [DataMember(Name = "Email")]
    private EmailAddress email;

    public EmailAddress Email
    {
        get { return this.email; }
    }

    [DataMember(Name = "OriginalVersion")]
    private Int32 originalVersion;

    public Int32 OriginalVersion
    {
        get { return this.originalVersion; }
    }

    public SetUserEmail(UserId userId, EmailAddress email, Int32 originalVersion)
    {
        this.userId = userId;
        this.email = email;
        this.originalVersion = originalVersion;
    }
    
    public bool Equals(SetUserEmail other)
    {
        if (this != null)
		{
			return other != null && UserId.Equals(this.UserId, other.UserId) && EmailAddress.Equals(this.Email, other.Email) && Int32.Equals(this.OriginalVersion, other.OriginalVersion);
		}
		return other == null;
    }

    public override bool Equals(object obj)
    {
        var other = obj as SetUserEmail;
        return other != null && this.Equals(other);
    }

    public override int GetHashCode()
    {
        var hash = 17;
        
        if (this.UserId != null)
            hash = hash * 29 + this.UserId.GetHashCode();
        if (this.Email != null)
            hash = hash * 29 + this.Email.GetHashCode();
        hash = hash * 29 + this.OriginalVersion.GetHashCode();
        
        return hash;
    }

    public static bool operator ==(SetUserEmail a, SetUserEmail b)
    {
	    if (System.Object.ReferenceEquals(a, b))
		{
			return true;
		}
		if (((object)a == null) || ((object)b == null))
		{
			return false;
		}
		return a.Equals(b);
	}

	public static bool operator !=(SetUserEmail a, SetUserEmail b)
	{
		return !(a == b);
	}
}

[GeneratedCodeAttribute("CommandsGenerator.fsx", "1.0.0.0")]
[DataContract(Namespace = "http://teamboard.com/contracts/commands/")]
public sealed class CreateNewOrder: ICommand<OrderId>, IEquatable<CreateNewOrder>
{
    public OrderId Id
    {
        get { return this.orderId; }
    }

    [DataMember(Name = "OrderId")]
    private OrderId orderId;

    public OrderId OrderId
    {
        get { return this.orderId; }
    }

    [DataMember(Name = "UserId")]
    private UserId userId;

    public UserId UserId
    {
        get { return this.userId; }
    }

    public CreateNewOrder(OrderId orderId, UserId userId)
    {
        this.orderId = orderId;
        this.userId = userId;
    }
    
    public bool Equals(CreateNewOrder other)
    {
        if (this != null)
		{
			return other != null && OrderId.Equals(this.OrderId, other.OrderId) && UserId.Equals(this.UserId, other.UserId);
		}
		return other == null;
    }

    public override bool Equals(object obj)
    {
        var other = obj as CreateNewOrder;
        return other != null && this.Equals(other);
    }

    public override int GetHashCode()
    {
        var hash = 17;
        
        if (this.OrderId != null)
            hash = hash * 29 + this.OrderId.GetHashCode();
        if (this.UserId != null)
            hash = hash * 29 + this.UserId.GetHashCode();
        
        return hash;
    }

    public static bool operator ==(CreateNewOrder a, CreateNewOrder b)
    {
	    if (System.Object.ReferenceEquals(a, b))
		{
			return true;
		}
		if (((object)a == null) || ((object)b == null))
		{
			return false;
		}
		return a.Equals(b);
	}

	public static bool operator !=(CreateNewOrder a, CreateNewOrder b)
	{
		return !(a == b);
	}
}

[GeneratedCodeAttribute("CommandsGenerator.fsx", "1.0.0.0")]
[DataContract(Namespace = "http://teamboard.com/contracts/commands/")]
public sealed class AddProductToOrder: ICommand<OrderId>, IEquatable<AddProductToOrder>
{
    public OrderId Id
    {
        get { return this.orderId; }
    }

    [DataMember(Name = "OrderId")]
    private OrderId orderId;

    public OrderId OrderId
    {
        get { return this.orderId; }
    }

    [DataMember(Name = "OrderItemId")]
    private OrderItemId orderItemId;

    public OrderItemId OrderItemId
    {
        get { return this.orderItemId; }
    }

    [DataMember(Name = "ProductUri")]
    private Uri productUri;

    public Uri ProductUri
    {
        get { return this.productUri; }
    }

    [DataMember(Name = "Name")]
    private String name;

    public String Name
    {
        get { return this.name; }
    }

    [DataMember(Name = "Description")]
    private String description;

    public String Description
    {
        get { return this.description; }
    }

    [DataMember(Name = "Price")]
    private Decimal price;

    public Decimal Price
    {
        get { return this.price; }
    }

    [DataMember(Name = "Quantity")]
    private Int32 quantity;

    public Int32 Quantity
    {
        get { return this.quantity; }
    }

    [DataMember(Name = "Size")]
    private String size;

    public String Size
    {
        get { return this.size; }
    }

    [DataMember(Name = "Color")]
    private String color;

    public String Color
    {
        get { return this.color; }
    }

    [DataMember(Name = "ImageUri")]
    private Uri imageUri;

    public Uri ImageUri
    {
        get { return this.imageUri; }
    }

    [DataMember(Name = "OriginalVersion")]
    private Int32 originalVersion;

    public Int32 OriginalVersion
    {
        get { return this.originalVersion; }
    }

    public AddProductToOrder(OrderId orderId, OrderItemId orderItemId, Uri productUri, String name, String description, Decimal price, Int32 quantity, String size, String color, Uri imageUri, Int32 originalVersion)
    {
        this.orderId = orderId;
        this.orderItemId = orderItemId;
        this.productUri = productUri;
        this.name = name;
        this.description = description;
        this.price = price;
        this.quantity = quantity;
        this.size = size;
        this.color = color;
        this.imageUri = imageUri;
        this.originalVersion = originalVersion;
    }
    
    public bool Equals(AddProductToOrder other)
    {
        if (this != null)
		{
			return other != null && OrderId.Equals(this.OrderId, other.OrderId) && OrderItemId.Equals(this.OrderItemId, other.OrderItemId) && Uri.Equals(this.ProductUri, other.ProductUri) && String.Equals(this.Name, other.Name) && String.Equals(this.Description, other.Description) && Decimal.Equals(this.Price, other.Price) && Int32.Equals(this.Quantity, other.Quantity) && String.Equals(this.Size, other.Size) && String.Equals(this.Color, other.Color) && Uri.Equals(this.ImageUri, other.ImageUri) && Int32.Equals(this.OriginalVersion, other.OriginalVersion);
		}
		return other == null;
    }

    public override bool Equals(object obj)
    {
        var other = obj as AddProductToOrder;
        return other != null && this.Equals(other);
    }

    public override int GetHashCode()
    {
        var hash = 17;
        
        if (this.OrderId != null)
            hash = hash * 29 + this.OrderId.GetHashCode();
        if (this.OrderItemId != null)
            hash = hash * 29 + this.OrderItemId.GetHashCode();
        if (this.ProductUri != null)
            hash = hash * 29 + this.ProductUri.GetHashCode();
        if (this.Name != null)
            hash = hash * 29 + this.Name.GetHashCode();
        if (this.Description != null)
            hash = hash * 29 + this.Description.GetHashCode();
        hash = hash * 29 + this.Price.GetHashCode();
        hash = hash * 29 + this.Quantity.GetHashCode();
        if (this.Size != null)
            hash = hash * 29 + this.Size.GetHashCode();
        if (this.Color != null)
            hash = hash * 29 + this.Color.GetHashCode();
        if (this.ImageUri != null)
            hash = hash * 29 + this.ImageUri.GetHashCode();
        hash = hash * 29 + this.OriginalVersion.GetHashCode();
        
        return hash;
    }

    public static bool operator ==(AddProductToOrder a, AddProductToOrder b)
    {
	    if (System.Object.ReferenceEquals(a, b))
		{
			return true;
		}
		if (((object)a == null) || ((object)b == null))
		{
			return false;
		}
		return a.Equals(b);
	}

	public static bool operator !=(AddProductToOrder a, AddProductToOrder b)
	{
		return !(a == b);
	}
}

[GeneratedCodeAttribute("CommandsGenerator.fsx", "1.0.0.0")]
[DataContract(Namespace = "http://teamboard.com/contracts/commands/")]
public sealed class RemoveItemFromOrder: ICommand<OrderId>, IEquatable<RemoveItemFromOrder>
{
    public OrderId Id
    {
        get { return this.orderId; }
    }

    [DataMember(Name = "OrderId")]
    private OrderId orderId;

    public OrderId OrderId
    {
        get { return this.orderId; }
    }

    [DataMember(Name = "OrderItemId")]
    private OrderItemId orderItemId;

    public OrderItemId OrderItemId
    {
        get { return this.orderItemId; }
    }

    [DataMember(Name = "OriginalVersion")]
    private Int32 originalVersion;

    public Int32 OriginalVersion
    {
        get { return this.originalVersion; }
    }

    public RemoveItemFromOrder(OrderId orderId, OrderItemId orderItemId, Int32 originalVersion)
    {
        this.orderId = orderId;
        this.orderItemId = orderItemId;
        this.originalVersion = originalVersion;
    }
    
    public bool Equals(RemoveItemFromOrder other)
    {
        if (this != null)
		{
			return other != null && OrderId.Equals(this.OrderId, other.OrderId) && OrderItemId.Equals(this.OrderItemId, other.OrderItemId) && Int32.Equals(this.OriginalVersion, other.OriginalVersion);
		}
		return other == null;
    }

    public override bool Equals(object obj)
    {
        var other = obj as RemoveItemFromOrder;
        return other != null && this.Equals(other);
    }

    public override int GetHashCode()
    {
        var hash = 17;
        
        if (this.OrderId != null)
            hash = hash * 29 + this.OrderId.GetHashCode();
        if (this.OrderItemId != null)
            hash = hash * 29 + this.OrderItemId.GetHashCode();
        hash = hash * 29 + this.OriginalVersion.GetHashCode();
        
        return hash;
    }

    public static bool operator ==(RemoveItemFromOrder a, RemoveItemFromOrder b)
    {
	    if (System.Object.ReferenceEquals(a, b))
		{
			return true;
		}
		if (((object)a == null) || ((object)b == null))
		{
			return false;
		}
		return a.Equals(b);
	}

	public static bool operator !=(RemoveItemFromOrder a, RemoveItemFromOrder b)
	{
		return !(a == b);
	}
}

[GeneratedCodeAttribute("CommandsGenerator.fsx", "1.0.0.0")]
[DataContract(Namespace = "http://teamboard.com/contracts/commands/")]
public sealed class SubmitOrder: ICommand<OrderId>, IEquatable<SubmitOrder>
{
    public OrderId Id
    {
        get { return this.orderId; }
    }

    [DataMember(Name = "OrderId")]
    private OrderId orderId;

    public OrderId OrderId
    {
        get { return this.orderId; }
    }

    [DataMember(Name = "OriginalVersion")]
    private Int32 originalVersion;

    public Int32 OriginalVersion
    {
        get { return this.originalVersion; }
    }

    public SubmitOrder(OrderId orderId, Int32 originalVersion)
    {
        this.orderId = orderId;
        this.originalVersion = originalVersion;
    }
    
    public bool Equals(SubmitOrder other)
    {
        if (this != null)
		{
			return other != null && OrderId.Equals(this.OrderId, other.OrderId) && Int32.Equals(this.OriginalVersion, other.OriginalVersion);
		}
		return other == null;
    }

    public override bool Equals(object obj)
    {
        var other = obj as SubmitOrder;
        return other != null && this.Equals(other);
    }

    public override int GetHashCode()
    {
        var hash = 17;
        
        if (this.OrderId != null)
            hash = hash * 29 + this.OrderId.GetHashCode();
        hash = hash * 29 + this.OriginalVersion.GetHashCode();
        
        return hash;
    }

    public static bool operator ==(SubmitOrder a, SubmitOrder b)
    {
	    if (System.Object.ReferenceEquals(a, b))
		{
			return true;
		}
		if (((object)a == null) || ((object)b == null))
		{
			return false;
		}
		return a.Equals(b);
	}

	public static bool operator !=(SubmitOrder a, SubmitOrder b)
	{
		return !(a == b);
	}
}

}
