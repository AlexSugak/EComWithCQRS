//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by the "ExceptionsGenerator.fsx" script.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Runtime.Serialization;

namespace ECom.Messages
{

[GeneratedCodeAttribute("ExceptionsGenerator.fsx", "1.0.0.0")]
[DataContract]
public sealed class AggregateRootNotFoundException: Exception, IEquatable<AggregateRootNotFoundException>
{
    private const string defaultMessage = "Requested aggregate root was not found";
    
    [DataMember(Name = "AggregateType")]
    private Type aggregateType;

    public Type AggregateType
    {
        get { return this.aggregateType; }
    }

    [DataMember(Name = "AggregateId")]
    private Object aggregateId;

    public Object AggregateId
    {
        get { return this.aggregateId; }
    }

    public AggregateRootNotFoundException()
    {
    }

    public AggregateRootNotFoundException(string message): base(message)
    {
    }

    public AggregateRootNotFoundException(string message, Exception innerException): base(message, innerException)
    {
    }

    public AggregateRootNotFoundException(Type aggregateType, Object aggregateId): base(defaultMessage)
    {
        this.aggregateType = aggregateType;
        this.aggregateId = aggregateId;
    }

    public AggregateRootNotFoundException(Type aggregateType, Object aggregateId, Exception innerException): base(defaultMessage, innerException)
    {
        this.aggregateType = aggregateType;
        this.aggregateId = aggregateId;
    }

    public AggregateRootNotFoundException(Type aggregateType, Object aggregateId, string message, Exception innerException): base(message, innerException)
    {
        this.aggregateType = aggregateType;
        this.aggregateId = aggregateId;
    }

    public bool Equals(AggregateRootNotFoundException other)
    {
        if (this != null)
		{
			return other != null && Type.Equals(this.AggregateType, other.AggregateType) && Object.Equals(this.AggregateId, other.AggregateId);
		}
		return other == null;
    }

    public override bool Equals(object obj)
    {
        var other = obj as AggregateRootNotFoundException;
        return other != null && this.Equals(other);
    }

    public override int GetHashCode()
    {
        return ((this.AggregateType == null) ? 0 : this.AggregateType.GetHashCode()) ^ ((this.AggregateId == null) ? 0 : this.AggregateId.GetHashCode());
    }
}

[GeneratedCodeAttribute("ExceptionsGenerator.fsx", "1.0.0.0")]
[DataContract]
public sealed class DuplicateEntityException: Exception, IEquatable<DuplicateEntityException>
{
    private const string defaultMessage = "Specified entity already exists";
    
    [DataMember(Name = "EntityType")]
    private Type entityType;

    public Type EntityType
    {
        get { return this.entityType; }
    }

    [DataMember(Name = "EntityId")]
    private Object entityId;

    public Object EntityId
    {
        get { return this.entityId; }
    }

    public DuplicateEntityException()
    {
    }

    public DuplicateEntityException(string message): base(message)
    {
    }

    public DuplicateEntityException(string message, Exception innerException): base(message, innerException)
    {
    }

    public DuplicateEntityException(Type entityType, Object entityId): base(defaultMessage)
    {
        this.entityType = entityType;
        this.entityId = entityId;
    }

    public DuplicateEntityException(Type entityType, Object entityId, Exception innerException): base(defaultMessage, innerException)
    {
        this.entityType = entityType;
        this.entityId = entityId;
    }

    public DuplicateEntityException(Type entityType, Object entityId, string message, Exception innerException): base(message, innerException)
    {
        this.entityType = entityType;
        this.entityId = entityId;
    }

    public bool Equals(DuplicateEntityException other)
    {
        if (this != null)
		{
			return other != null && Type.Equals(this.EntityType, other.EntityType) && Object.Equals(this.EntityId, other.EntityId);
		}
		return other == null;
    }

    public override bool Equals(object obj)
    {
        var other = obj as DuplicateEntityException;
        return other != null && this.Equals(other);
    }

    public override int GetHashCode()
    {
        return ((this.EntityType == null) ? 0 : this.EntityType.GetHashCode()) ^ ((this.EntityId == null) ? 0 : this.EntityId.GetHashCode());
    }
}

[GeneratedCodeAttribute("ExceptionsGenerator.fsx", "1.0.0.0")]
[DataContract]
public sealed class EntityNotFoundException: Exception, IEquatable<EntityNotFoundException>
{
    private const string defaultMessage = "Requested entity was not found";
    
    [DataMember(Name = "EntityType")]
    private Type entityType;

    public Type EntityType
    {
        get { return this.entityType; }
    }

    [DataMember(Name = "AggregateId")]
    private Object aggregateId;

    public Object AggregateId
    {
        get { return this.aggregateId; }
    }

    [DataMember(Name = "EntityId")]
    private Object entityId;

    public Object EntityId
    {
        get { return this.entityId; }
    }

    public EntityNotFoundException()
    {
    }

    public EntityNotFoundException(string message): base(message)
    {
    }

    public EntityNotFoundException(string message, Exception innerException): base(message, innerException)
    {
    }

    public EntityNotFoundException(Type entityType, Object aggregateId, Object entityId): base(defaultMessage)
    {
        this.entityType = entityType;
        this.aggregateId = aggregateId;
        this.entityId = entityId;
    }

    public EntityNotFoundException(Type entityType, Object aggregateId, Object entityId, Exception innerException): base(defaultMessage, innerException)
    {
        this.entityType = entityType;
        this.aggregateId = aggregateId;
        this.entityId = entityId;
    }

    public EntityNotFoundException(Type entityType, Object aggregateId, Object entityId, string message, Exception innerException): base(message, innerException)
    {
        this.entityType = entityType;
        this.aggregateId = aggregateId;
        this.entityId = entityId;
    }

    public bool Equals(EntityNotFoundException other)
    {
        if (this != null)
		{
			return other != null && Type.Equals(this.EntityType, other.EntityType) && Object.Equals(this.AggregateId, other.AggregateId) && Object.Equals(this.EntityId, other.EntityId);
		}
		return other == null;
    }

    public override bool Equals(object obj)
    {
        var other = obj as EntityNotFoundException;
        return other != null && this.Equals(other);
    }

    public override int GetHashCode()
    {
        return ((this.EntityType == null) ? 0 : this.EntityType.GetHashCode()) ^ ((this.AggregateId == null) ? 0 : this.AggregateId.GetHashCode()) ^ ((this.EntityId == null) ? 0 : this.EntityId.GetHashCode());
    }
}

[GeneratedCodeAttribute("ExceptionsGenerator.fsx", "1.0.0.0")]
[DataContract]
public sealed class ReferencedEntityNotFoundException: Exception, IEquatable<ReferencedEntityNotFoundException>
{
    private const string defaultMessage = "Referenced entity was not found";
    
    [DataMember(Name = "EntityType")]
    private String entityType;

    public String EntityType
    {
        get { return this.entityType; }
    }

    [DataMember(Name = "EntityId")]
    private IIdentity entityId;

    public IIdentity EntityId
    {
        get { return this.entityId; }
    }

    public ReferencedEntityNotFoundException()
    {
    }

    public ReferencedEntityNotFoundException(string message): base(message)
    {
    }

    public ReferencedEntityNotFoundException(string message, Exception innerException): base(message, innerException)
    {
    }

    public ReferencedEntityNotFoundException(String entityType, IIdentity entityId): base(defaultMessage)
    {
        this.entityType = entityType;
        this.entityId = entityId;
    }

    public ReferencedEntityNotFoundException(String entityType, IIdentity entityId, Exception innerException): base(defaultMessage, innerException)
    {
        this.entityType = entityType;
        this.entityId = entityId;
    }

    public ReferencedEntityNotFoundException(String entityType, IIdentity entityId, string message, Exception innerException): base(message, innerException)
    {
        this.entityType = entityType;
        this.entityId = entityId;
    }

    public bool Equals(ReferencedEntityNotFoundException other)
    {
        if (this != null)
		{
			return other != null && String.Equals(this.EntityType, other.EntityType) && IIdentity.Equals(this.EntityId, other.EntityId);
		}
		return other == null;
    }

    public override bool Equals(object obj)
    {
        var other = obj as ReferencedEntityNotFoundException;
        return other != null && this.Equals(other);
    }

    public override int GetHashCode()
    {
        return ((this.EntityType == null) ? 0 : this.EntityType.GetHashCode()) ^ ((this.EntityId == null) ? 0 : this.EntityId.GetHashCode());
    }
}

}
